generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "linux-musl-openssl-3.0.x"]
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  COLLECTOR
}

enum ProcessStatus {
  PENDING
  FAILED
  IN_PROGRESS
  COMPLETED
}

model User {
  id                             String    @id @default(uuid())
  name                           String
  avatar                         String?
  email                          String    @unique()
  phone                          String?   @unique()
  password                       String
  recoveryPasswordToken          String?
  recoveryPasswordTokenExpiresAt DateTime?
  type                           Role      @default(COLLECTOR)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  processes       Process[]
  loginHistory    LoginHistory[]
  linkedProcesses ProcessUser[]
}

model LoginHistory {
  id      String   @id @default(uuid())
  userId  String
  loginAt DateTime @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Process {
  id          String  @id @default(uuid())
  userId      String
  description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  user         User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  palettes     Palette[] // imagens processadas
  processUsers ProcessUser[]
  locations    ProcessLocation[]
}

model Palette {
  id        String @id @default(uuid())
  processId String
  filename  String
  format    String
  path      String
  width     Int?
  height    Int?
  metadata  Json?

  status           ProcessStatus @default(PENDING)
  eggsCount        Int?
  expectedEggs     Int?
  initialTimestamp DateTime?
  finalTimestamp   DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  process Process @relation(fields: [processId], references: [id], onDelete: Cascade)
}

model Location {
  id     String  @id @default(uuid())
  name   String
  global Boolean @default(false)

  processes ProcessLocation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

model ProcessLocation {
  id         String @id @default(uuid())
  processId  String
  locationId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  process  Process  @relation(fields: [processId], references: [id], onDelete: Cascade)
  location Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
}

model ProcessUser {
  id        String @id @default(uuid())
  userId    String
  processId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  process Process @relation(fields: [processId], references: [id], onDelete: Cascade)
}
