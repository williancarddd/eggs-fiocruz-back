generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "linux-musl-openssl-3.0.x"]
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  COLLECTOR
}

enum ProcessStatus {
  PENDING
  FAILED
  IN_PROGRESS
  COMPLETED
}

model User {
  id       String @id @default(uuid())
  name     String
  email    String @unique()
  password String
  type     Role   @default(COLLECTOR)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  processes    Process[]
  loginHistory loginHistory[]
}

model loginHistory {
  id      String   @id @default(uuid())
  userId  String
  loginAt DateTime @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Process {
  id          String  @id @default(uuid())
  userId      String
  description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  processExecutions ProcessExecutions[]
}

model ProcessExecutions {
  id          String        @id @default(uuid())
  processId   String?
  algorithm   String?
  resultPath  String?
  description String?
  status      ProcessStatus @default(PENDING)

  metadata Json?

  eggsCount    Int?
  expectedEggs Int?

  initialTimestamp DateTime?
  finalTimestamp   DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  Process Process? @relation(fields: [processId], references: [id], onDelete: Cascade)
}
